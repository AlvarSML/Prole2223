Terminals unused in grammar

    MAS
    MENOS
    POR
    ENTRE


Grammar

    0 $accept: stmtsequence $end

    1 stmtsequence: programstmt
    2             | programstmt stmtsequence

    3 programstmt: assigconstruct
    4            | loopconstruct
    5            | ifconstruct
    6            | printstmt

    7 loopconstruct: WHILE '(' expr ')' stmtsequence ENDWHILE

    8 ifconstruct: ifthenstmt stmtsequence elseifconstruct elseconstruct ENDIF

    9 ifthenstmt: IF '(' expr ')' THEN

   10 elseifconstruct: ELSEIF '(' expr ')' THEN stmtsequence elseiffinal

   11 elseiffinal: elseifconstruct
   12            | %empty

   13 elseconstruct: elseseq
   14              | %empty

   15 elseseq: ELSE stmtsequence

   16 printstmt: PRINT expr printexprs

   17 printexprs: ',' expr
   18           | %empty

   19 assigconstruct: ID assignopts

   20 $@1: %empty

   21 assignopts: ASIGNA $@1 expr
   22           | INCREMENTO
   23           | DECREMENTO

   24 expr: expr expropts multexp
   25     | multexp

   26 expropts: '+'
   27         | '-'

   28 multexp: multexp '*' value
   29        | multexp '/' value
   30        | value

   31 value: '(' expr ')'
   32      | NUM
   33      | ID


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 7 9 10 31
    ')' (41) 7 9 10 31
    '*' (42) 28
    '+' (43) 26
    ',' (44) 17
    '-' (45) 27
    '/' (47) 29
    error (256)
    IF (258) 9
    THEN (259) 9 10
    ELSEIF (260) 10
    ELSE (261) 15
    WHILE (262) 7
    ENDWHILE (263) 7
    ENDIF (264) 8
    INCREMENTO (265) 22
    DECREMENTO (266) 23
    PRINT (267) 16
    ASIGNA (268) 21
    MAS (269)
    MENOS (270)
    POR (271)
    ENTRE (272)
    ID <string> (273) 19 33
    NUM <numero> (274) 32


Nonterminals, with rules where they appear

    $accept (27)
        on left: 0
    stmtsequence (28)
        on left: 1 2
        on right: 0 2 7 8 10 15
    programstmt (29)
        on left: 3 4 5 6
        on right: 1 2
    loopconstruct (30)
        on left: 7
        on right: 4
    ifconstruct (31)
        on left: 8
        on right: 5
    ifthenstmt (32)
        on left: 9
        on right: 8
    elseifconstruct (33)
        on left: 10
        on right: 8 11
    elseiffinal (34)
        on left: 11 12
        on right: 10
    elseconstruct (35)
        on left: 13 14
        on right: 8
    elseseq (36)
        on left: 15
        on right: 13
    printstmt (37)
        on left: 16
        on right: 6
    printexprs (38)
        on left: 17 18
        on right: 16
    assigconstruct (39)
        on left: 19
        on right: 3
    assignopts (40)
        on left: 21 22 23
        on right: 19
    $@1 (41)
        on left: 20
        on right: 21
    expr (42)
        on left: 24 25
        on right: 7 9 10 16 17 21 24 31
    expropts (43)
        on left: 26 27
        on right: 24
    multexp (44)
        on left: 28 29 30
        on right: 24 25 28 29
    value (45)
        on left: 31 32 33
        on right: 28 29 30


State 0

    0 $accept: . stmtsequence $end

    IF     shift, and go to state 1
    WHILE  shift, and go to state 2
    PRINT  shift, and go to state 3
    ID     shift, and go to state 4

    stmtsequence    go to state 5
    programstmt     go to state 6
    loopconstruct   go to state 7
    ifconstruct     go to state 8
    ifthenstmt      go to state 9
    printstmt       go to state 10
    assigconstruct  go to state 11


State 1

    9 ifthenstmt: IF . '(' expr ')' THEN

    '('  shift, and go to state 12


State 2

    7 loopconstruct: WHILE . '(' expr ')' stmtsequence ENDWHILE

    '('  shift, and go to state 13


State 3

   16 printstmt: PRINT . expr printexprs

    ID   shift, and go to state 14
    NUM  shift, and go to state 15
    '('  shift, and go to state 16

    expr     go to state 17
    multexp  go to state 18
    value    go to state 19


State 4

   19 assigconstruct: ID . assignopts

    INCREMENTO  shift, and go to state 20
    DECREMENTO  shift, and go to state 21
    ASIGNA      shift, and go to state 22

    assignopts  go to state 23


State 5

    0 $accept: stmtsequence . $end

    $end  shift, and go to state 24


State 6

    1 stmtsequence: programstmt .
    2             | programstmt . stmtsequence

    IF     shift, and go to state 1
    WHILE  shift, and go to state 2
    PRINT  shift, and go to state 3
    ID     shift, and go to state 4

    $default  reduce using rule 1 (stmtsequence)

    stmtsequence    go to state 25
    programstmt     go to state 6
    loopconstruct   go to state 7
    ifconstruct     go to state 8
    ifthenstmt      go to state 9
    printstmt       go to state 10
    assigconstruct  go to state 11


State 7

    4 programstmt: loopconstruct .

    $default  reduce using rule 4 (programstmt)


State 8

    5 programstmt: ifconstruct .

    $default  reduce using rule 5 (programstmt)


State 9

    8 ifconstruct: ifthenstmt . stmtsequence elseifconstruct elseconstruct ENDIF

    IF     shift, and go to state 1
    WHILE  shift, and go to state 2
    PRINT  shift, and go to state 3
    ID     shift, and go to state 4

    stmtsequence    go to state 26
    programstmt     go to state 6
    loopconstruct   go to state 7
    ifconstruct     go to state 8
    ifthenstmt      go to state 9
    printstmt       go to state 10
    assigconstruct  go to state 11


State 10

    6 programstmt: printstmt .

    $default  reduce using rule 6 (programstmt)


State 11

    3 programstmt: assigconstruct .

    $default  reduce using rule 3 (programstmt)


State 12

    9 ifthenstmt: IF '(' . expr ')' THEN

    ID   shift, and go to state 14
    NUM  shift, and go to state 15
    '('  shift, and go to state 16

    expr     go to state 27
    multexp  go to state 18
    value    go to state 19


State 13

    7 loopconstruct: WHILE '(' . expr ')' stmtsequence ENDWHILE

    ID   shift, and go to state 14
    NUM  shift, and go to state 15
    '('  shift, and go to state 16

    expr     go to state 28
    multexp  go to state 18
    value    go to state 19


State 14

   33 value: ID .

    $default  reduce using rule 33 (value)


State 15

   32 value: NUM .

    $default  reduce using rule 32 (value)


State 16

   31 value: '(' . expr ')'

    ID   shift, and go to state 14
    NUM  shift, and go to state 15
    '('  shift, and go to state 16

    expr     go to state 29
    multexp  go to state 18
    value    go to state 19


State 17

   16 printstmt: PRINT expr . printexprs
   24 expr: expr . expropts multexp

    ','  shift, and go to state 30
    '+'  shift, and go to state 31
    '-'  shift, and go to state 32

    $default  reduce using rule 18 (printexprs)

    printexprs  go to state 33
    expropts    go to state 34


State 18

   25 expr: multexp .
   28 multexp: multexp . '*' value
   29        | multexp . '/' value

    '*'  shift, and go to state 35
    '/'  shift, and go to state 36

    $default  reduce using rule 25 (expr)


State 19

   30 multexp: value .

    $default  reduce using rule 30 (multexp)


State 20

   22 assignopts: INCREMENTO .

    $default  reduce using rule 22 (assignopts)


State 21

   23 assignopts: DECREMENTO .

    $default  reduce using rule 23 (assignopts)


State 22

   21 assignopts: ASIGNA . $@1 expr

    $default  reduce using rule 20 ($@1)

    $@1  go to state 37


State 23

   19 assigconstruct: ID assignopts .

    $default  reduce using rule 19 (assigconstruct)


State 24

    0 $accept: stmtsequence $end .

    $default  accept


State 25

    2 stmtsequence: programstmt stmtsequence .

    $default  reduce using rule 2 (stmtsequence)


State 26

    8 ifconstruct: ifthenstmt stmtsequence . elseifconstruct elseconstruct ENDIF

    ELSEIF  shift, and go to state 38

    elseifconstruct  go to state 39


State 27

    9 ifthenstmt: IF '(' expr . ')' THEN
   24 expr: expr . expropts multexp

    ')'  shift, and go to state 40
    '+'  shift, and go to state 31
    '-'  shift, and go to state 32

    expropts  go to state 34


State 28

    7 loopconstruct: WHILE '(' expr . ')' stmtsequence ENDWHILE
   24 expr: expr . expropts multexp

    ')'  shift, and go to state 41
    '+'  shift, and go to state 31
    '-'  shift, and go to state 32

    expropts  go to state 34


State 29

   24 expr: expr . expropts multexp
   31 value: '(' expr . ')'

    ')'  shift, and go to state 42
    '+'  shift, and go to state 31
    '-'  shift, and go to state 32

    expropts  go to state 34


State 30

   17 printexprs: ',' . expr

    ID   shift, and go to state 14
    NUM  shift, and go to state 15
    '('  shift, and go to state 16

    expr     go to state 43
    multexp  go to state 18
    value    go to state 19


State 31

   26 expropts: '+' .

    $default  reduce using rule 26 (expropts)


State 32

   27 expropts: '-' .

    $default  reduce using rule 27 (expropts)


State 33

   16 printstmt: PRINT expr printexprs .

    $default  reduce using rule 16 (printstmt)


State 34

   24 expr: expr expropts . multexp

    ID   shift, and go to state 14
    NUM  shift, and go to state 15
    '('  shift, and go to state 16

    multexp  go to state 44
    value    go to state 19


State 35

   28 multexp: multexp '*' . value

    ID   shift, and go to state 14
    NUM  shift, and go to state 15
    '('  shift, and go to state 16

    value  go to state 45


State 36

   29 multexp: multexp '/' . value

    ID   shift, and go to state 14
    NUM  shift, and go to state 15
    '('  shift, and go to state 16

    value  go to state 46


State 37

   21 assignopts: ASIGNA $@1 . expr

    ID   shift, and go to state 14
    NUM  shift, and go to state 15
    '('  shift, and go to state 16

    expr     go to state 47
    multexp  go to state 18
    value    go to state 19


State 38

   10 elseifconstruct: ELSEIF . '(' expr ')' THEN stmtsequence elseiffinal

    '('  shift, and go to state 48


State 39

    8 ifconstruct: ifthenstmt stmtsequence elseifconstruct . elseconstruct ENDIF

    ELSE  shift, and go to state 49

    $default  reduce using rule 14 (elseconstruct)

    elseconstruct  go to state 50
    elseseq        go to state 51


State 40

    9 ifthenstmt: IF '(' expr ')' . THEN

    THEN  shift, and go to state 52


State 41

    7 loopconstruct: WHILE '(' expr ')' . stmtsequence ENDWHILE

    IF     shift, and go to state 1
    WHILE  shift, and go to state 2
    PRINT  shift, and go to state 3
    ID     shift, and go to state 4

    stmtsequence    go to state 53
    programstmt     go to state 6
    loopconstruct   go to state 7
    ifconstruct     go to state 8
    ifthenstmt      go to state 9
    printstmt       go to state 10
    assigconstruct  go to state 11


State 42

   31 value: '(' expr ')' .

    $default  reduce using rule 31 (value)


State 43

   17 printexprs: ',' expr .
   24 expr: expr . expropts multexp

    '+'  shift, and go to state 31
    '-'  shift, and go to state 32

    $default  reduce using rule 17 (printexprs)

    expropts  go to state 34


State 44

   24 expr: expr expropts multexp .
   28 multexp: multexp . '*' value
   29        | multexp . '/' value

    '*'  shift, and go to state 35
    '/'  shift, and go to state 36

    $default  reduce using rule 24 (expr)


State 45

   28 multexp: multexp '*' value .

    $default  reduce using rule 28 (multexp)


State 46

   29 multexp: multexp '/' value .

    $default  reduce using rule 29 (multexp)


State 47

   21 assignopts: ASIGNA $@1 expr .
   24 expr: expr . expropts multexp

    '+'  shift, and go to state 31
    '-'  shift, and go to state 32

    $default  reduce using rule 21 (assignopts)

    expropts  go to state 34


State 48

   10 elseifconstruct: ELSEIF '(' . expr ')' THEN stmtsequence elseiffinal

    ID   shift, and go to state 14
    NUM  shift, and go to state 15
    '('  shift, and go to state 16

    expr     go to state 54
    multexp  go to state 18
    value    go to state 19


State 49

   15 elseseq: ELSE . stmtsequence

    IF     shift, and go to state 1
    WHILE  shift, and go to state 2
    PRINT  shift, and go to state 3
    ID     shift, and go to state 4

    stmtsequence    go to state 55
    programstmt     go to state 6
    loopconstruct   go to state 7
    ifconstruct     go to state 8
    ifthenstmt      go to state 9
    printstmt       go to state 10
    assigconstruct  go to state 11


State 50

    8 ifconstruct: ifthenstmt stmtsequence elseifconstruct elseconstruct . ENDIF

    ENDIF  shift, and go to state 56


State 51

   13 elseconstruct: elseseq .

    $default  reduce using rule 13 (elseconstruct)


State 52

    9 ifthenstmt: IF '(' expr ')' THEN .

    $default  reduce using rule 9 (ifthenstmt)


State 53

    7 loopconstruct: WHILE '(' expr ')' stmtsequence . ENDWHILE

    ENDWHILE  shift, and go to state 57


State 54

   10 elseifconstruct: ELSEIF '(' expr . ')' THEN stmtsequence elseiffinal
   24 expr: expr . expropts multexp

    ')'  shift, and go to state 58
    '+'  shift, and go to state 31
    '-'  shift, and go to state 32

    expropts  go to state 34


State 55

   15 elseseq: ELSE stmtsequence .

    $default  reduce using rule 15 (elseseq)


State 56

    8 ifconstruct: ifthenstmt stmtsequence elseifconstruct elseconstruct ENDIF .

    $default  reduce using rule 8 (ifconstruct)


State 57

    7 loopconstruct: WHILE '(' expr ')' stmtsequence ENDWHILE .

    $default  reduce using rule 7 (loopconstruct)


State 58

   10 elseifconstruct: ELSEIF '(' expr ')' . THEN stmtsequence elseiffinal

    THEN  shift, and go to state 59


State 59

   10 elseifconstruct: ELSEIF '(' expr ')' THEN . stmtsequence elseiffinal

    IF     shift, and go to state 1
    WHILE  shift, and go to state 2
    PRINT  shift, and go to state 3
    ID     shift, and go to state 4

    stmtsequence    go to state 60
    programstmt     go to state 6
    loopconstruct   go to state 7
    ifconstruct     go to state 8
    ifthenstmt      go to state 9
    printstmt       go to state 10
    assigconstruct  go to state 11


State 60

   10 elseifconstruct: ELSEIF '(' expr ')' THEN stmtsequence . elseiffinal

    ELSEIF  shift, and go to state 38

    $default  reduce using rule 12 (elseiffinal)

    elseifconstruct  go to state 61
    elseiffinal      go to state 62


State 61

   11 elseiffinal: elseifconstruct .

    $default  reduce using rule 11 (elseiffinal)


State 62

   10 elseifconstruct: ELSEIF '(' expr ')' THEN stmtsequence elseiffinal .

    $default  reduce using rule 10 (elseifconstruct)
