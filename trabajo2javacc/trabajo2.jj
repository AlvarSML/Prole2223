/*
- El lenguaje de alto nivel es muy sencillo. 
[x] No tiene declaración de tipos.
[x] El único tipo que permite es el tipo entero.
[] En las condiciones de las instrucciones if y while el valor 0 se interpreta como falso y cualquier 
otro valor como cierto.
[] Los operadores de incremento/decremento '++' y '--' hacen que la variable 
aumente/decremente su valor en un entero.

[x] Los comentarios en el lenguaje serán en línea comenzando con "!".

[x] Debe ser capaz de leer por entrada estándar (teclado) y por un fichero que se 
le pase por argumento.
[x] Eliminacion de recursividad de izquierda
[x] Factorizacion

*/
PARSER_BEGIN(Trabajo2)

import java.io.File;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.Scanner; // Import the Scanner class to read text files
import java.io.FileReader;
import java.io.BufferedReader;

public class Trabajo2 {

    public static int nWhile = 0, nCondicional = 0, profundidad = 0 ;

    public static void print(String msg, int depth){
        String iden = "";
        for (int i=0;i<depth;i++){
            iden = iden+"\t";
        }
        System.out.print(iden+msg);
    }

    public static void main(String args[]) throws java.io.FileNotFoundException, ParseException{
        Trabajo2 parser; 
        System.out.println(args);
        if (args.length == 0) {
            parser = new Trabajo2(System.in);
            parser.stmtseq();
        } else {
            for (String arg: args){
                File archivoPrograma = new File(arg);
                BufferedReader br = new BufferedReader(new FileReader(archivoPrograma));
                parser = new Trabajo2(br);
                parser.stmtseq();
            }
        }      
    }
}

PARSER_END(Trabajo2)

TOKEN_MGR_DECLS:
{

}

TOKEN:
{
    <ASIGNACION: "=">
|   <COMPARACION: "==">
|   <SUMA: "+">
|   <RESTA: "-">
|   <MULTIPILCACION: "*">
|   <DIVISION: "/">
|   <INCREMENTO: "++">
|   <DECREMENTO: "--">
|   <WHILE: "while">
|   <ENDWHILE: "endwhile">
|   <IF: "if">
|   <ENDIF: "endif">
|   <THEN: "then">
|   <ELSE: "else">
|   <ELSEIF: "elseif">
|   <PRINT: "print">
|   <APERTURA_PAR: "(">
|   <CIERRE_PAR: ")">
|   <NUMERO: ( ["0"-"9"] )+ >
|   <ID: ["$","A"-"Z","_","a"-"z"] (["$","A"-"Z","_","a"-"z","0"-"9"])* >
}

SKIP:
{
    <BLANCO: ["\b"," "]>
|   <TABULADOR: ["\t"]>
|   <INTRO: ["\n"]>
|   <COMMENTARIO : "!" (~["\n"])* ("\n") >
}

//! Gramaticas

//? stmtseq = "Statement sequence" progstmt = "Program statement" 
/*
* stmtseq -> progstmt stmtseq?      
*/    

void stmtseq():
{
    String statement, sequence;
}
{
    progstmt() (stmtseq())?
    | <EOF>
}

//? program statement "Todas las opciones que puede tener el programa"
/*
 * programstmt -> assigconstruct
 *               |  loopconstruct
 *               |  ifconstruct
 *               |  printstmt
*/

void progstmt():
{}
{
    ( assigconstruct()  {}
    | loopconstruct()   {System.out.println("# Fin de bucle");}
    | ifconstruct()     {System.out.println("# Fin de condicional");}
    | printstmt()       
    )      
}

//? loop construct (WHILE)
/*
* loopconstruct -> 
*           WHILE '(' expr ')' stmtseq ENDWHILE
*/
void loopconstruct():
{
    String inicio, fin;
}
{   
    {        
        inicio = "INIWHILE"+(++nWhile)+"\n";
        fin = "FINWHILE"+(nWhile)+"\n";
        print(inicio,profundidad);
        profundidad++;
    }
    <WHILE> 
    <APERTURA_PAR> expr() <CIERRE_PAR> {print("sifalsovea "+fin,profundidad);}
    stmtseq()
    {
        print("vea "+inicio,profundidad);
    }
    <ENDWHILE>
    {
        profundidad--;
        print(fin,profundidad);
    }
}

//? ifconstruct "Sentencia IF"
/*
 * ifconstruct -> ifstmt stmtseq (elseifconstruct)* (elseconstruct)? ENDIF
 */
void ifconstruct():
{
    int n_elif = 0;
    String sigelse;
}
{
    ifstmt(n_elif) // if (expr) then:  
    stmtseq()      //   [expr is true] {}
        {
            profundidad--;
            print("vea FINIF"+(nCondicional)+"\n",profundidad);
            sigelse = "ELSEIF"+(nCondicional)+"|"+(n_elif)+"\n";
            print(sigelse,profundidad);
        }
    (elseifconstruct((++n_elif)) 
        {
            profundidad--;
            sigelse = "ELSEIF"+(nCondicional)+"|"+(n_elif)+"\n";
            print(sigelse,profundidad);
            print("vea FINIF"+(nCondicional)+"\n",profundidad);
        } 
    )* 
    (elseconstruct(++n_elif))? 
    <ENDIF>
        {
            print("FINIF"+(nCondicional)+"\n",profundidad);
        }
}

//? ifstmt "Estructura de la condicion del if"
/*
 * ifstmt -> IF '(' expr ')' THEN
 */
void ifstmt(int n_elif):
{
    String sigelse;
    
}
{
    {
        sigelse = "ELSEIF"+(nCondicional)+"|"+(n_elif)+"\n";
        print("# Inicio de IF\n",profundidad);
        profundidad++;
    }
    <IF> <APERTURA_PAR> expr() <CIERRE_PAR> {print("sifalsovea "+sigelse,profundidad);}
    <THEN>

}

//? elseifconstruct "Sentencia elseif"
/*
 * elseifconstruct -> 
 *                  ELSEIF '(' expr ')' THEN stmtsequence
 */

 void elseifconstruct(int num):
 {
    String sigelse;
 }
 {
    {
        sigelse = "ELSEIF"+(nCondicional)+"|";
        //print(sigelse+(num-1)+"\n",profundidad);
        profundidad++;        
    }
    <ELSEIF> <APERTURA_PAR> expr() <CIERRE_PAR> {print("sifalsovea "+sigelse+(num)+"\n",profundidad);}
    <THEN> stmtseq()
 }

//? elseconstruct "Sentencia else"
/*
 * elseconstruct 
 *              -> ELSE stmtseq
 */
void elseconstruct(int num):
{
    String sigelse;
}
{
    {
        sigelse = "ELSEIF"+(nCondicional)+"|";
        //print(sigelse+(num-1)+"\n",profundidad);
        //print("ELSE"+nCondicional+"\n",profundidad);
    }
    <ELSE>
    {
        profundidad++;
    }
    stmtseq()
    {
        profundidad--;
    }
}

//? printstmt "print"
/*
 * printstmt 
 *          -> PRINT expr (',' expr)*
 */
void printstmt():
{}
{
    <PRINT> expr() {print("print\n",profundidad);}
    ("," expr() {print("print\n",profundidad);} )*
}
    

//? assigconstruct "Asignacion de valores a una variable"
/*
 * assigconstruct -> ID '=' expr 
 *               |  ID '++' 
 *               |  ID '--'
 */
void assigconstruct():
{
    Token tk;
}
{
    /*
    <ID> <ASIGNACION> expr()
    | <ID> <INCREMENTO>
    | <ID> <DECREMENTO>
    */
    tk=<ID>                 {
                                print("valori "+tk.image+" \n",profundidad);
                            }
    ((<ASIGNACION> expr())  {print("asigna\n",profundidad);}
    | <INCREMENTO>          {
                                print("mete 1\n",profundidad);
                                print("suma\n",profundidad);
                            }
    | <DECREMENTO>          {
                                print("mete 1\n",profundidad);
                                print("resta\n",profundidad);
                            }
    )
}

//? expr expresion
/*
 * expr -> 
 *      multexp expr'
 */

void expr():
{}
{
    multexpr() (expr_())*
}

//? expr_ suma resta seguido de mulexpr
/*
 * expr' ->
 *      (+|-) mulexpr
 */
void expr_():
{
    Token tk;
    String op;
}
{
    ("+" {op="suma";} | "-" {op="resta";} ) multexpr() {print(op+"\n",profundidad);}
}


//? multexpr "multiplicacion/division expression"
/*
*  multexp -> 
*          multexp ('*' value | '/' value) | value
*/

void multexpr():
{}
{
    // multexpr() (<MULTIPILCACION> value() | <DIVISION> value()) | value()
    //((<MULTIPILCACION> value() | <DIVISION> value()) | value()) multexp()
    value() (multexpr_())*
}

void multexpr_():
{
    Token tk;
    String op,val;
}
{
    //["*""/"] value() 
    ("*" { op="mul"; } | "/" {op="div";} ) value() {print(op,profundidad);}
}

//? value "Valor"
/*
 * multexp -> 
 *          multexp ('*' value | '/' value) | value
 */
void value():
{
    Token tk;
    String id;
}
// Siempre el ID de aqui es un valord 
{
    <APERTURA_PAR> expr() <CIERRE_PAR> 
    | tk=<NUMERO> {print("mete "+tk.image+"\n",profundidad);}
    | tk=<ID>  {print("valord "+tk.image+"\n",profundidad);}
}
