/*
8888888                                         888                      888             
  888                                           888                      888             
  888                                           888                      888             
  888   88888b.d88b.  88888b.   .d88b.  888d888 888888  8888b.  88888b.  888888  .d88b.  
  888   888 "888 "88b 888 "88b d88""88b 888P"   888        "88b 888 "88b 888    d8P  Y8b 
  888   888  888  888 888  888 888  888 888     888    .d888888 888  888 888    88888888 
  888   888  888  888 888 d88P Y88..88P 888     Y88b.  888  888 888  888 Y88b.  Y8b.     
8888888 888  888  888 88888P"   "Y88P"  888      "Y888 "Y888888 888  888  "Y888  "Y8888  
                      888                                                                
                      888                                                                
                      888                                  

- Se han añadido comentarions a la pila que comienzan por "#" 
    para indicar cuando empiexan los if y los while, asi se
    pueden identificar aunque esten anidados
- Han sido añadidads tabulaciones para identificar mejor los
    bucles anidados, las etiquetas marcan el comienzo y el fin,
    por ejemplo el contenido de un elseif va a estar una posicion
    mas a la derechas que la etiqueta que indica su inicio.
- He modificado la generacion de las etiquetas para que cada 
    una tenga un significado que permita identificar su
    funcion en cada bloque:

    WHILE:
    - INIWHILE[n]: Indica el comienzo de un bucle, n indica
        en que bucle nos encontramos, de esta forma no se
        repiten las etiquetas.
    - FINWHILE[n]: Indica el fin de un bloque WHILE con 
        numero n que se corresponde con un INIWHILE con
        el mismo n
    
    IF ELSIF ELSE:
    En este coso no tenemos etiqueta de entrada asi que se
    incluye un comentario con el numero n de condicional
    - ELSEIF[n]|[m]: En este caso n sirve para indetificar
        el numero de condicional IF en el que nos encontramos
        (ifstmt) que sera el mismo en todo el bloque y m 
        identifica el siguiente else/elseif de tal forma que
        el primer elseif del condicional 1 va a ser identificado
        como ELSEIF1|0, el siguiente ELSEIF1|1 etc. Si
        tuviesemos un if anidado dentro del 1 su primer elseif
        se identificaria como ELSEIF2|0, asi se garantiza que
        a pesar de comaprtir nombre, todos los else/elseif del
        programa pila se pueden identificar de forma
        inequivoca.
    - FINIF[n]: Se genera para indicar el final de un IF,
        en caso de no tener un else, se garantiza que exite
        una etiqueta a la que saltar si la condicion es falsa.
    
    Un if con elseif sin else tendra redundancia con esta forma:
    # Inicio de IF [(n)]
        [Condicion del IF(n)]
        sifalso ve a ELSEIF(n)|0
        [Operaciones si cierto]
        vea FIN(n)
    ELSEIF(n)|0
        [condicion del ELSEIF]
        sifalso ve a ELSEIF(n)|1
        [Operaciones si cierto]
        vea FIN(n)
    ELSEIF(n)|1
        vea FIN(n)
    FIN(n)

      (()__(()
     /       \ 
    ( /    \  \
     \ o o    /
     (_()_)__/ \             
    / _,==.____ \
   (   |--|      )  Perdon por la chapa
   /\_.|__|'-.__/\_
  / (        /     \ 
  \  \      (      /
   )  '._____)    /    
(((____.--(((____/mrf
*/
PARSER_BEGIN(Trabajo2)

import java.io.File;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.Scanner; // Import the Scanner class to read text files
import java.io.FileReader;
import java.io.BufferedReader;

public class Trabajo2 {

    public static int nWhile = 0, nCondicional = 0, profundidad = 0 ;

    /**
     * Esta fucion encapsula el println para poder incluir tabulaciones de forma automatizada
     * @param msg La cadena a imprimit
     * @param profundidad El numeo de tabulaciones que se insertan antes del mensaje
     */
    public static void print(String msg, int depth){
        String iden = "";
        for (int i=0;i<depth;i++){
            iden = iden+"\t";
        }
        System.out.print(iden+msg);
    }

    public static void main(String args[]) throws java.io.FileNotFoundException, ParseException{
        Trabajo2 parser; 
        System.out.println(args);
        if (args.length == 0) {
            parser = new Trabajo2(System.in);
            parser.stmtseq();
        } else {
            for (String arg: args){
                File archivoPrograma = new File(arg);
                BufferedReader br = new BufferedReader(new FileReader(archivoPrograma));
                parser = new Trabajo2(br);
                parser.stmtseq();
            }
        }      
    }
}

PARSER_END(Trabajo2)

TOKEN_MGR_DECLS:
{

}

TOKEN:
{
    <ASIGNACION: "=">
|   <COMPARACION: "==">
|   <SUMA: "+">
|   <RESTA: "-">
|   <MULTIPILCACION: "*">
|   <DIVISION: "/">
|   <INCREMENTO: "++">
|   <DECREMENTO: "--">
|   <WHILE: "while">
|   <ENDWHILE: "endwhile">
|   <IF: "if">
|   <ENDIF: "endif">
|   <THEN: "then">
|   <ELSE: "else">
|   <ELSEIF: "elseif">
|   <PRINT: "print">
|   <APERTURA_PAR: "(">
|   <CIERRE_PAR: ")">
|   <NUMERO: ( ["0"-"9"] )+ >
|   <ID: ["$","A"-"Z","_","a"-"z"] (["$","A"-"Z","_","a"-"z","0"-"9"])* >
}

SKIP:
{
    <BLANCO: ["\b"," "]>
|   <TABULADOR: ["\t"]>
|   <INTRO: ["\n"]>
|   <COMMENTARIO : "!" (~["\n"])* ("\n") >
}

//! Gramaticas

//? stmtseq = "Statement sequence" progstmt = "Program statement" 
/*
* stmtseq -> progstmt stmtseq?      
*/    

void stmtseq():
{
    String statement, sequence;
}
{
    progstmt() (stmtseq())?
    | <EOF>
}

//? program statement "Todas las opciones que puede tener el programa"
/*
 * programstmt -> assigconstruct
 *               |  loopconstruct
 *               |  ifconstruct
 *               |  printstmt
*/

void progstmt():
{}
{
    ( assigconstruct()              {}
    | loopconstruct()               {print("# Fin de bucle\n",profundidad);}
    | ifconstruct(nCondicional)     {print("# Fin de condicional\n",profundidad);}
    | printstmt()       
    )      
}

//? loop construct (WHILE)
/*
* loopconstruct -> 
*           WHILE '(' expr ')' stmtseq ENDWHILE
*/
void loopconstruct():
{
    String inicio, fin;
}
{   
    {        
        inicio = "INIWHILE"+(++nWhile)+"\n";
        fin = "FINWHILE"+(nWhile)+"\n";
        print(inicio,profundidad);
        profundidad++;
    }
    <WHILE> 
    <APERTURA_PAR> expr() <CIERRE_PAR> {print("sifalsovea "+fin,profundidad);}
    stmtseq()
    {
        print("vea "+inicio,profundidad);
    }
    <ENDWHILE>
    {
        profundidad--;
        print(fin,profundidad);
    }
}

//? ifconstruct "Sentencia IF"
/*
 * ifconstruct -> ifstmt stmtseq (elseifconstruct)* (elseconstruct)? ENDIF
 */
void ifconstruct(int nIf):
{
    int n_elif = 0;
    String sigelse;
}
{
    {
        nCondicional++;
    }
    ifstmt(nIf,n_elif) // if (expr) then:  
    stmtseq()      //   [expr is true] {}
        {
            profundidad--;
            print("vea FINIF"+(nIf)+"\n",profundidad);
            sigelse = "ELSEIF"+(nIf)+"|"+(n_elif)+"\n";
            print(sigelse,profundidad);
        }
    (elseifconstruct(nIf,(++n_elif)) 
        {
            profundidad--;
            sigelse = "ELSEIF"+(nIf)+"|"+(n_elif)+"\n";
            print(sigelse,profundidad);
            print("vea FINIF"+(nIf)+"\n",profundidad);
        } 
    )* 
    (elseconstruct(++n_elif))? 
    <ENDIF>
        {
            print("FINIF"+(nIf)+"\n",profundidad);
        }
}

//? ifstmt "Estructura de la condicion del if"
/*
 * ifstmt -> IF '(' expr ')' THEN
 */
void ifstmt(int nIf, int n_elif):
{
    String sigelse;
    
}
{
    {
        sigelse = "ELSEIF"+(nIf)+"|"+(n_elif)+"\n";
        print("# Inicio de IF ["+nIf+"]\n",profundidad);
        profundidad++;
    }
    <IF> <APERTURA_PAR> expr() <CIERRE_PAR> {print("sifalsovea "+sigelse,profundidad);}
    <THEN>

}

//? elseifconstruct "Sentencia elseif"
/*
 * elseifconstruct -> 
 *                  ELSEIF '(' expr ')' THEN stmtsequence
 */

 void elseifconstruct(int nIf,int num):
 {
    String sigelse;
 }
 {
    {
        sigelse = "ELSEIF"+(nIf)+"|";
        //print(sigelse+(num-1)+"\n",profundidad);
        profundidad++;        
    }
    <ELSEIF> <APERTURA_PAR> expr() <CIERRE_PAR> {print("sifalsovea "+sigelse+(num)+"\n",profundidad);}
    <THEN> stmtseq()
 }

//? elseconstruct "Sentencia else"
/*
 * elseconstruct 
 *              -> ELSE stmtseq
 */
void elseconstruct(int num):
{
    String sigelse;
}
{
    {
        sigelse = "ELSEIF"+(nCondicional)+"|";
        //print(sigelse+(num-1)+"\n",profundidad);
        //print("ELSE"+nCondicional+"\n",profundidad);
    }
    <ELSE>
    {
        profundidad++;
    }
    stmtseq()
    {
        profundidad--;
    }
}

//? printstmt "print"
/*
 * printstmt 
 *          -> PRINT expr (',' expr)*
 */
void printstmt():
{}
{
    <PRINT> expr() {print("print\n",profundidad);}
    ("," expr() {print("print\n",profundidad);} )*
}
    

//? assigconstruct "Asignacion de valores a una variable"
/*
 * assigconstruct -> ID '=' expr 
 *               |  ID '++' 
 *               |  ID '--'
 */
void assigconstruct():
{
    Token tk;
}
{
    /*
    <ID> <ASIGNACION> expr()
    | <ID> <INCREMENTO>
    | <ID> <DECREMENTO>
    */
    tk=<ID>                 {
                                print("valori "+tk.image+" \n",profundidad);
                            }
    ((<ASIGNACION> expr())  {print("asigna\n",profundidad);}
    | <INCREMENTO>          {
                                print("mete 1\n",profundidad);
                                print("suma\n",profundidad);
                                print("asigna\n",profundidad);
                            }
    | <DECREMENTO>          {
                                print("mete 1\n",profundidad);
                                print("resta\n",profundidad);
                                print("asigna\n",profundidad);
                            }
    )
}

//? expr expresion
/*
 * expr -> 
 *      multexp expr'
 */

void expr():
{}
{
    multexpr() (expr_())*
}

//? expr_ suma resta seguido de mulexpr
/*
 * expr' ->
 *      (+|-) mulexpr
 */
void expr_():
{
    Token tk;
    String op;
}
{
    ("+" {op="suma";} | "-" {op="resta";} ) multexpr() {print(op+"\n",profundidad);}
}


//? multexpr "multiplicacion/division expression"
/*
*  multexp -> 
*          multexp ('*' value | '/' value) | value
*/

void multexpr():
{}
{
    // multexpr() (<MULTIPILCACION> value() | <DIVISION> value()) | value()
    //((<MULTIPILCACION> value() | <DIVISION> value()) | value()) multexp()
    value() (multexpr_())*
}

void multexpr_():
{
    Token tk;
    String op,val;
}
{
    //["*""/"] value() 
    ("*" { op="mul\n"; } | "/" {op="div\n";} ) value() {print(op,profundidad);}
}

//? value "Valor"
/*
 * multexp -> 
 *          multexp ('*' value | '/' value) | value
 */
void value():
{
    Token tk;
    String id;
}
// Siempre el ID de aqui es un valord 
{
    <APERTURA_PAR> expr() <CIERRE_PAR> 
    | tk=<NUMERO> {print("mete "+tk.image+"\n",profundidad);}
    | tk=<ID>  {print("valord "+tk.image+"\n",profundidad);}
}
